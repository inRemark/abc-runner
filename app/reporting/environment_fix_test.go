package reporting

import (
	"os"
	"runtime"
	"testing"
	"time"

	"abc-runner/app/core/interfaces"
	"abc-runner/app/core/metrics"
)

func TestGenerateEnvironmentInfo(t *testing.T) {
	// 测试环境信息生成功能
	envInfo := generateEnvironmentInfo()
	
	// 验证操作系统信息
	if envInfo.OSName == "" {
		t.Error("Expected non-empty OS name")
	}
	
	expectedOS := runtime.GOOS
	if envInfo.OSName != expectedOS {
		t.Errorf("Expected OS name %s, got %s", expectedOS, envInfo.OSName)
	}
	
	// 验证架构信息
	if envInfo.Architecture == "" {
		t.Error("Expected non-empty architecture")
	}
	
	expectedArch := runtime.GOARCH
	if envInfo.Architecture != expectedArch {
		t.Errorf("Expected architecture %s, got %s", expectedArch, envInfo.Architecture)
	}
	
	// 验证Go版本信息
	if envInfo.GoVersion == "" {
		t.Error("Expected non-empty Go version")
	}
	
	expectedGoVersion := runtime.Version()
	if envInfo.GoVersion != expectedGoVersion {
		t.Errorf("Expected Go version %s, got %s", expectedGoVersion, envInfo.GoVersion)
	}
	
	// 验证应用版本信息
	if envInfo.ABCRunnerVersion == "" {
		t.Error("Expected non-empty ABC Runner version")
	}
	
	if envInfo.ABCRunnerVersion != "3.0.0" {
		t.Errorf("Expected ABC Runner version 3.0.0, got %s", envInfo.ABCRunnerVersion)
	}
	
	// 验证主机名信息（可能为unknown，如果获取失败）
	if envInfo.Hostname == "" {
		t.Error("Expected non-empty hostname")
	}
}

func TestGenerateContextMetadata(t *testing.T) {
	// 创建测试快照
	snapshot := &metrics.MetricsSnapshot[map[string]interface{}]{
		Core: interfaces.CoreMetrics{
			Operations: interfaces.OperationMetrics{
				Total:   100,
				Success: 95,
				Failed:  5,
				Rate:    95.0,
			},
			Latency: interfaces.LatencyMetrics{
				Min:     10 * time.Millisecond,
				Max:     100 * time.Millisecond,
				Average: 50 * time.Millisecond,
			},
			Throughput: interfaces.ThroughputMetrics{
				RPS: 100.0,
			},
			Duration: 60 * time.Second,
		},
		Protocol: map[string]interface{}{
			"protocol": "redis",
			"version":  "6.0",
		},
		System: interfaces.SystemMetrics{
			GoroutineCount: 10,
			MemoryUsage: interfaces.MemoryMetrics{
				Allocated: 1024,
			},
		},
		Timestamp: time.Now(),
	}
	
	metadata := generateContextMetadata(snapshot)
	
	// 验证测试配置
	if metadata.TestConfiguration.Protocol != "redis" {
		t.Errorf("Expected protocol redis, got %s", metadata.TestConfiguration.Protocol)
	}
	
	if metadata.TestConfiguration.TotalOperations != 100 {
		t.Errorf("Expected 100 total operations, got %d", metadata.TestConfiguration.TotalOperations)
	}
	
	if metadata.TestConfiguration.TestDuration != 60*time.Second {
		t.Errorf("Expected test duration 60s, got %v", metadata.TestConfiguration.TestDuration)
	}
	
	// 验证环境信息完整性
	env := metadata.Environment
	if env.OSName == "" {
		t.Error("Expected non-empty OS name in context metadata")
	}
	
	if env.Architecture == "" {
		t.Error("Expected non-empty architecture in context metadata")
	}
	
	if env.GoVersion == "" {
		t.Error("Expected non-empty Go version in context metadata")
	}
	
	if env.ABCRunnerVersion == "" {
		t.Error("Expected non-empty ABC Runner version in context metadata")
	}
	
	if env.Hostname == "" {
		t.Error("Expected non-empty hostname in context metadata")
	}
	
	// 验证执行上下文
	execCtx := metadata.ExecutionContext
	if execCtx.GeneratedBy == "" {
		t.Error("Expected non-empty generated by field")
	}
	
	if execCtx.ReportVersion == "" {
		t.Error("Expected non-empty report version")
	}
	
	if execCtx.UniqueSessionID == "" {
		t.Error("Expected non-empty session ID")
	}
	
	// 验证时间戳合理性
	now := time.Now()
	if execCtx.GeneratedAt.After(now) || execCtx.GeneratedAt.Before(now.Add(-time.Minute)) {
		t.Error("Generated timestamp should be recent")
	}
}

func TestEnvironmentInfoVsEmptyEnvironment(t *testing.T) {
	// 对比修复前后的环境信息差异
	
	// 模拟修复前的空环境信息
	emptyEnv := EnvInfo{
		ABCRunnerVersion: "3.0.0",
		// 其他字段为空
	}
	
	// 修复后的完整环境信息
	fullEnv := generateEnvironmentInfo()
	
	// 验证修复后的环境信息比修复前更完整
	if fullEnv.OSName == "" && emptyEnv.OSName == "" {
		t.Error("OS name should be populated after fix")
	}
	
	if fullEnv.Architecture == "" && emptyEnv.Architecture == "" {
		t.Error("Architecture should be populated after fix")
	}
	
	if fullEnv.GoVersion == "" && emptyEnv.GoVersion == "" {
		t.Error("Go version should be populated after fix")
	}
	
	if fullEnv.Hostname == "" && emptyEnv.Hostname == "" {
		t.Error("Hostname should be populated after fix")
	}
	
	// 验证修复后的信息确实不为空
	if fullEnv.OSName == "" || fullEnv.Architecture == "" || fullEnv.GoVersion == "" {
		t.Error("Fixed environment info should have all required fields populated")
	}
}

func TestHostnameHandling(t *testing.T) {
	// 测试主机名获取的错误处理
	
	// 备份原始的主机名
	originalHostname, _ := os.Hostname()
	
	// 测试正常情况
	envInfo := generateEnvironmentInfo()
	if envInfo.Hostname == "" {
		t.Error("Expected non-empty hostname in normal case")
	}
	
	// 如果能获取到主机名，验证它的合理性
	if originalHostname != "" && envInfo.Hostname != originalHostname {
		t.Errorf("Expected hostname %s, got %s", originalHostname, envInfo.Hostname)
	}
	
	// 验证即使在异常情况下也有默认值
	// 注意：在正常的测试环境中，os.Hostname() 通常不会失败
	// 但我们的代码应该能处理这种情况
	if envInfo.Hostname == "" {
		t.Error("Hostname should never be empty, should have default value 'unknown'")
	}
}